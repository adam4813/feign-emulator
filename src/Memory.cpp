#include "../include/Memory.h"

#include <memory>

#include "../include/CPU.h"

namespace Memory {
    MMU::MMU() : _rom(nullptr) {
        unsigned char bios[] = {
            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
            0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
            0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
            0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
            0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
            0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
            0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
            0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,
        };

        memcpy(this->_bios, &bios, 256);
        memset(this->ram, 0, sizeof(this->ram));

        this->_inbios = false;

        this->romOffset = 0x4000;
        this->ramOffset = 0x0000;

        this->rombank = 1;
        this->rambank = 0;
        this->ramOn = false;
        this->mode = 0;
        WriteByte(0xFF05, 0x00);
        WriteByte(0xFF06, 0x00);
        WriteByte(0xFF07, 0x00);
        WriteByte(0xFF10, 0x80);
        WriteByte(0xFF11, 0xBF);
        WriteByte(0xFF12, 0xF3);
        WriteByte(0xFF14, 0xBF);
        WriteByte(0xFF16, 0x3F);
        WriteByte(0xFF17, 0x00);
        WriteByte(0xFF19, 0xBF);
        WriteByte(0xFF1A, 0x7F);
        WriteByte(0xFF1B, 0xFF);
        WriteByte(0xFF1C, 0x9F);
        WriteByte(0xFF1E, 0xBF);
        WriteByte(0xFF20, 0xFF);
        WriteByte(0xFF21, 0x00);
        WriteByte(0xFF22, 0x00);
        WriteByte(0xFF23, 0xBF);
        WriteByte(0xFF24, 0x77);
        WriteByte(0xFF25, 0xF3);
        WriteByte(0xFF26, 0xF1);
        WriteByte(0xFFFF, 0x00);
    }

    MMU::~MMU() {
        if (this->_rom != nullptr) {
            delete[] this->_rom;
        }
    }

    void MMU::SetCPU(Processor::Z80* p) {
        this->cpu = p;
    }

    void MMU::AllocateROM(unsigned int size, unsigned char* data /*= nullptr*/) {
        this->_rom = new unsigned char[size];
        this->ROMSize = size;
        memset(this->_rom, 0, this->ROMSize);

        if (data) {
            memcpy(this->_rom, data, this->ROMSize);
        }
    }

    void MMU::SetCatridgeType(Byte type) {
        this->cartType = type;
    }

    void MMU::WriteByte(const Word& address, const Byte& val) {
        if (address >= 0x8000) {
            this->ram[address - 0x8000] = val;
            // Shadow ram write
            if ((address > 0xC000) && (address < 0xDE00)) {
                this->ram[address - 0x7000] = val;
            }
            return;
        }

        switch ((address & 0xF000) >> 12) {
            // BIOS (256b)/ROM0
        case 0x0:
        if (this->_inbios && (address < 0x0100)) {
            return;
        }
        break;
        // ROM0
        case 0x1:
        this->ramOn = ((val & 0x0F) == 0x0A);
        break;
        case 0x2: case 0x3:
        if (!(val & 0x1F)) {
            this->rombank = (val & 1) | (this->rombank & 0xE0);
        }
        else {
            this->rombank = (val & 0x1F) | (this->rombank & 0xE0);
        }

        break;
        // ROM1 (unbanked) (16k)
        case 0x4: case 0x5:
        if (this->mode) {
            this->rambank = val & 0x03;
        }
        else {
            this->rombank = (this->rombank & 0x1F) | ((val & 0x03) << 5);
        }
        break;
        case 0x6: case 0x7:
        this->mode = val & 0x01;
        break;
        default:
        break;
        }
    }

    void MMU::WriteWord(const Word& address, const Word& val) {
        WriteByte(address, val & 0xFF);
        WriteByte(address + 1, (val >> 8) & 0xFF);
    }
}